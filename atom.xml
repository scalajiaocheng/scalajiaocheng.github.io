<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Scala教程]]></title>
  <link href="http://scalajiaocheng.github.io/atom.xml" rel="self"/>
  <link href="http://scalajiaocheng.github.io/"/>
  
  <updated>2016-01-06T00:40:12+08:00</updated>
  <id>http://scalajiaocheng.github.io/</id>
  <author>
    <name><![CDATA[Scala教程]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scala的虚无与飘渺]]></title>
    <link href="http://scalajiaocheng.github.io/blog/2016/01/03/scalade-xu-wu-yu-piao-miao/"/>
    <updated>2016-01-03T17:46:05+08:00</updated>
    <id>http://scalajiaocheng.github.io/blog/2016/01/03/scalade-xu-wu-yu-piao-miao</id>
    <content type="html"><![CDATA[<p>Null-&gt;null <br />
Nothing <br />
Nil-&gt;List[Nothing]  <br />
None-&gt;Option <br />
Unit  <br />
很多人抱怨Scala相比于Java过于复杂了：大部分使用过Scala的程序员都没有能深刻理解它的类型系统和Scala的函数式编程。Scala的类型系统跟Java和C++很不一样，Scala想把面向对象纯粹化（学院派的作风？），不能有破坏面向对象的一切因素出现。<code>null</code>、<code>NULL</code>、<code>int</code>、…这些都是不和谐的东西，应该割掉。Scala又给了太多了空间给程序员，你可以使用传统的命令式编程风格，也可以使用函数式风格，一个语言写出了不同的代码。这个跟汉语有很多方言，极为相似。太多的自由会浪费Scala的一片好心。一个思路是在封装完Java的功能后，尽量使用Scala推荐的函数式风格来写面向对象的程序。  <br />
进入Scala，你就进入了虚无缥缈的太虚境地。在何为有？何为无？的问题上？Scala的设计走得很远。Scala的有即<code>Any</code>，Scala的无是<code>Null</code>，<code>null</code>，<code>Nil</code>，<code>Nothing</code>，<code>None</code>，<code>Unit</code>。Scala的无太让人手足无措，今天就讨论Scala的无。  <br />
要想在正确的地方使用正确的无，就要先理解它们分别表示的含义。</p>

 <a href="http://scalajiaocheng.github.io/blog/2016/01/03/scalade-xu-wu-yu-piao-miao/">Read on <i class="fa fa-hand-o-right"></i></a>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Scala CHAPTER 2 Working with Data: Literals, Values,Variables, and Types]]></title>
    <link href="http://scalajiaocheng.github.io/blog/2015/12/29/learning-scala-chapter-2-working-with-data-literals-values-variables-and-types/"/>
    <updated>2015-12-29T23:25:28+08:00</updated>
    <id>http://scalajiaocheng.github.io/blog/2015/12/29/learning-scala-chapter-2-working-with-data-literals-values-variables-and-types</id>
    <content type="html"><![CDATA[<p>In this chapter we will cover the core data and variable types in Scala. Let’s start with the definitions of the terms <code>literal</code>, <code>value</code>, <code>variable</code>, and <code>type</code>:</p>

<ul>
  <li>A literal (or literal data) is data that appears directly in the source code, like the number <code>5</code>, the character <code>A</code>, and the text “<code>Hello, World.</code>”</li>
  <li>A value is an immutable, typed storage unit. A value can be assigned data when it is defined, but can never be reassigned.</li>
  <li>A variable is a mutable, typed storage unit. A variable can be assigned data when it is defined and can also be reassigned data at any time.</li>
  <li>A type is the kind of data you are working with, a definition or classification of data.</li>
</ul>

<p>All data in Scala corresponds to a specific type, and all Scala types are defined as classes with methods that operate on the data.       <br />
 <a href="http://scalajiaocheng.github.io/blog/2015/12/29/learning-scala-chapter-2-working-with-data-literals-values-variables-and-types/">Read on <i class="fa fa-hand-o-right"></i></a>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Scala CHAPTER 1 Getting Started with the ScalableLanguage]]></title>
    <link href="http://scalajiaocheng.github.io/blog/2015/12/29/learning-scala-chapter-1-getting-started-with-the-scalablelanguage/"/>
    <updated>2015-12-29T22:04:10+08:00</updated>
    <id>http://scalajiaocheng.github.io/blog/2015/12/29/learning-scala-chapter-1-getting-started-with-the-scalablelanguage</id>
    <content type="html"><![CDATA[<p>The Scala programming language has a wonderfully continental(adj. 大陆的；大陆性的) ring to its name, as befits its origins at the École polytechnique fédérale de Lausanne (EPFL) in Lausanne,Switzerland. The Scala logo represents a circular stairway, which may lead you to believe its origin is the term <strong>La Scala</strong>, meaning a staircase or ladder in Italian, or that it derives from the famous Italian opera house <strong>Teatro alla Scala</strong>. In fact the name Scala is an abbreviation of the term SCAlable LAnguage, a fitting description of its intention. Professor Martin Odersky and his group at EPFL created the language in 2003 to provide a high-performance, concurrent-ready environment for functional programming and object-oriented programming on the Java Virtual Machine (JVM) platform.                          <br />
 <a href="http://scalajiaocheng.github.io/blog/2015/12/29/learning-scala-chapter-1-getting-started-with-the-scalablelanguage/">Read on <i class="fa fa-hand-o-right"></i></a>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scala类型系统this别名和自身类型]]></title>
    <link href="http://scalajiaocheng.github.io/blog/2015/12/28/scalalei-xing-xi-tong-:-thisbie-ming-he-zi-shen-lei-xing/"/>
    <updated>2015-12-28T04:23:25+08:00</updated>
    <id>http://scalajiaocheng.github.io/blog/2015/12/28/scalalei-xing-xi-tong-:-thisbie-ming-he-zi-shen-lei-xing</id>
    <content type="html"><![CDATA[<p><code>self =&gt;</code>相当于给<code>this</code>起了一个别名为<code>self</code></p>

<pre><code>class A { 
    self =&gt;  //this别名
    val x=2 
    def foo = self.x + this.x 
}
</code></pre>

<p><code>self</code>不是关键字，可以用除了<code>this</code>外的任何名字命名(除关键字)。在A内部，可以用this指代当前对象，也可以用self指代，两者是等价的。 <br />
它的一个场景是用在有内部类中：                        <br />
 <a href="http://scalajiaocheng.github.io/blog/2015/12/28/scalalei-xing-xi-tong-:-thisbie-ming-he-zi-shen-lei-xing/">Read on <i class="fa fa-hand-o-right"></i></a>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Scala, 2nd Edition CHAPTER 1Zero to Sixty: Introducing Scala]]></title>
    <link href="http://scalajiaocheng.github.io/blog/2015/12/28/programming-scala-2nd-edition-chapter-1zero-to-sixty-introducing-scala/"/>
    <updated>2015-12-28T03:20:51+08:00</updated>
    <id>http://scalajiaocheng.github.io/blog/2015/12/28/programming-scala-2nd-edition-chapter-1zero-to-sixty-introducing-scala</id>
    <content type="html"><![CDATA[<p>Let’s start with a brief look at why you should give Scala a serious look. Then we’ll dive in and write some code.  <br />
 <a href="http://scalajiaocheng.github.io/blog/2015/12/28/programming-scala-2nd-edition-chapter-1zero-to-sixty-introducing-scala/">Read on <i class="fa fa-hand-o-right"></i></a>]]></content>
  </entry>
  
</feed>
